import { NextResponse } from "next/server";

// export async function POST(req: Request) {
//   const { text } = await req.json();

//   try {
//     const OLLAMA_URL = process.env.OLLAMA_URL || "http://localhost:11436";

//     // More explicit prompt with strict formatting
//     const prompt = `
//     [INST] You are a quiz generator. Return ONLY this JSON structure about "${text}":
//     {
//       "quiz": [
//         {
//           "question": "Question 1 here",
//           "options": ["Option 1", "Option 2", "Option 3", "Option 4"],
//           "answer": "Correct option"
//         },
//         {
//           "question": "Question 2 here",
//           "options": ["Option 1", "Option 2", "Option 3", "Option 4"],
//           "answer": "Correct option"
//         }
//       ]
//     }
//     Do NOT include any additional text, explanations, or markdown formatting.
//     [/INST]
//     `;

//     const response = await fetch(`${OLLAMA_URL}/api/generate`, {
//       method: "POST",
//       headers: { "Content-Type": "application/json" },
//       body: JSON.stringify({
//         model: "deepseek-r1:1.5b",
//         prompt: prompt,
//         stream: false,
//         options: {
//           temperature: 0.3, // Lower for more structured responses
//           num_predict: 400,
//           seed: 42,
//         },
//       }),
//     });

//     const data = await response.json();
//     console.log("Full Ollama Response:", data); // Debug log

//     // Robust JSON extraction
//     let jsonStr = data.response.trim();
    
//     // Remove markdown code blocks if present
//     jsonStr = jsonStr.replace(/```json/g, '').replace(/```/g, '');
    
//     // Extract JSON from possible text wrapping
//     const jsonStart = jsonStr.indexOf('{');
//     const jsonEnd = jsonStr.lastIndexOf('}') + 1;
//     jsonStr = jsonStr.slice(jsonStart, jsonEnd);

//     const quiz = JSON.parse(jsonStr);
    
//     if (!quiz.quiz || !Array.isArray(quiz.quiz)) {
//       throw new Error("Invalid quiz format received");
//     }

//     return NextResponse.json(quiz);

//   } catch (error) {
//     console.error("Full error details:", {
//       error: error instanceof Error ? error.message : error,
//       stack: error instanceof Error ? error.stack : undefined
//     });
    
//     return NextResponse.json(
//       { 
//         quiz: [], 
//         error: "Failed to generate quiz. Please try a different topic or check the model.",
//         details: error instanceof Error ? error.message : undefined
//       },
//       { status: 500 }
//     );
//   }
// }

export async function POST(req: Request) {
  const { topic } = await req.json(); // Changed from 'text' to 'topic' for clarity

  try {
    const OLLAMA_URL = process.env.OLLAMA_URL || "http://localhost:11436";

    // Mistral-optimized prompt template
    const prompt = `<s>[INST] <<SYS>>
    Generate a 3-question quiz about "${topic}" in this EXACT JSON format:
    {
      "quiz": [
        {
          "question": "...",
          "options": ["...", "...", "...", "..."],
          "answer": "..."
        }
      ]
    }
    Rules:
    1. Strictly JSON format only
    2. No explanations or markdown
    3. All questions must be about "${topic}"
    <</SYS>>[/INST]`;

    const response = await fetch(`${OLLAMA_URL}/api/generate`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        model: "mistral:7b-instruct-q4_K_M",
        prompt: prompt,
        stream: false,
        options: {
          temperature: 0.2,  // Lower for strict JSON
          num_predict: 350,
          num_ctx: 2048,      // Matches Mistral's ideal context
          stop: ["</s>"],     // Mistral's stop sequence
          repeat_penalty: 1.1 // Prevents repetitive output
        }
      }),
    });

    if (!response.ok) {
      const error = await response.text();
      throw new Error(`Ollama error: ${error}`);
    }

    const data = await response.json();
    
    // Robust JSON extraction
    const rawResponse = data.response.trim();
    const jsonStart = rawResponse.indexOf('{');
    const jsonEnd = rawResponse.lastIndexOf('}') + 1;
    const jsonStr = rawResponse.slice(jsonStart, jsonEnd);

    const quiz = JSON.parse(jsonStr);

    // Validation
    if (!quiz?.quiz || !Array.isArray(quiz.quiz)) {
      throw new Error("Invalid quiz structure received");
    }

    return NextResponse.json(quiz);

  } catch (error) {
    console.error(`Quiz generation failed for topic "${topic}":`, error);
    return NextResponse.json(
      {
        quiz: [],
        error: "Failed to generate quiz",
        details: error instanceof Error ? error.message : undefined
      },
      { status: 500 }
    );
  }
}